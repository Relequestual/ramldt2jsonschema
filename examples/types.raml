#%RAML 1.0 Library

types:
  Song:
    properties:
      title:
        type: string
        example: Great
      length: string
  Album:
    properties:
      title: string
      songs:
        description: A list of songs inside an album.
        type: Song[]
    examples:
      Album1:
        title: Test 1
        songs:
          - title: Great
            length: "2"
          - title: Awesome
            length: "3"
      Album2:
        title: Test 2
        songs:
          - title: Great
            length: "2"
          - title: Awesome
            length: "3"
  Phone:
    type: object
    properties:
      manufacturer:
        type: string
      numberOfSIMCards:
        type: number
      kind: string
  Notebook:
    type: object
    properties:
      manufacturer:
        type: string
      numberOfUSBPorts:
        type: number
      kind: string
  Device:
    type: Phone | Notebook
  Deprecation:
    type: nil | string
  SimpleUnion:
    properties:
      a: string
      b: number | string
  WithInheritance:
    type: Device
    properties:
      phone: Phone
      device: Device
    example: |
      {
        "manufacturer": "John",
        "numberOfSIMCards": 1234,
        "kind": "Stamp Collecting",
        "phone": {
          "manufacturer": "John",
          "numberOfSIMCards": 1234,
          "kind": "Stamp Collecting"
        },
        "device": {
          "manufacturer": "John",
          "numberOfSIMCards": 1234,
          "kind": "Stamp Collecting"
        }
      }
  InlinedDeclaration:
    type:
      type: object
      properties:
        stringProperty:
          type: string
        numberProperty:
          type: number

  ValidConstraintsInheritance:
    minProperties: 2
    maxProperties: 9
    properties:
      name:
        type: string
        required: true
        minLength: 4
        maxLength: 9
        enum: ["Jane", "John"]
      age:
        type: integer
        minimum: 19
        maximum: 98
      cats:
        type: array
        items: string
        minItems: 2
        maxItems: 4
      bio:
        type: object
        minProperties: 2
        maxProperties: 9
    type:
      type: object
      discriminator: name
      discriminatorValue: "John"
      additionalProperties: false
      minProperties: 1
      maxProperties: 10
      properties:
        name:
          type: string
          required: false
          minLength: 3
          maxLength: 10
          pattern: foobar
          enum: ["Jane", "John", "Markus"]
        age:
          type: integer
          minimum: 18
          maximum: 99
        dob:
          type: datetime
          format: rfc2616
        cats:
          type: array
          items: string
          uniqueItems: true
          minItems: 1
          maxItems: 5
        bio:
          type: object
          minProperties: 1
          maxProperties: 10

  NameXML:
    type: string
    xml:
      attribute: false
      wrapped: true
      name: cat
      prefix: animal

  CatName:
    type: NameXML
    default: "regular cat"
    example: fluffy
    displayName: Cat
    description: "Cat name"
    facets:
      amazing: boolean

  CatBreed:
    type: string
    pattern: "\\w{3,}"
    examples:
      dogone: "Cat One"
      dogtwo: "Cat Two"
    enum: ["Cat One", "Cat Two", "Cat Three"]

  CatPros:
    type: array
    uniqueItems: false
    items: string
    minItems: 1
    maxItems: 100

  CatCons:
    type: array
    uniqueItems: true
    items:
      type: string
      minLength: 1
      maxLength: 100

  CatAge:
    type: number
    minimum: 1
    maximum: 50
    format: int32

  CatWithAddress:
    additionalProperties: false
    properties:
      address: string

  Cat:
    type: CatWithAddress
    minProperties: 1
    maxProperties: 50
    additionalProperties: false
    discriminator: breed
    discriminatorValue: AmazingCat
    properties:
      proscons:
        type: CatPros | CatCons
        required: false
      name:
        type: CatName
        amazing: true
      breed:
        type: CatBreed
      age: CatAge
      rating:
        type: integer
        multipleOf: 5
        example:
          displayName: Cat's rating
          description: Rating of cat's awesomeness
          strict: false
          value: 50
      year_of_birth: date-only
      time_of_birth: time-only
      dt_of_birth: datetime-only
      addition_date:
        type: datetime
        format: rfc2616
      photo:
        type: file
        fileTypes: ['image/jpeg', 'image/png']
        minLength: 1
        maxLength: 307200
      description: nil
      habits?: string
      siblings: string[]
      ratingHistory: (integer | number)[]
      additionalData:
        type:
          type: object
          properties:
            weight: number
